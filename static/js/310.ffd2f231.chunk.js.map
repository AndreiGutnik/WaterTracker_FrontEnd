{"version":3,"file":"static/js/310.ffd2f231.chunk.js","mappings":"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","sources":["redux/month/selectors.js","components/Calendar/Month/Month.styled.js","components/Calendar/Modal/CalendarModal.styled.js","components/Calendar/Modal/CalendarModal.jsx","components/Calendar/Month/Day.jsx","components/Calendar/Month/Month.jsx","components/WterModals/WaterModals.styled.js","components/WaterEditorForm/WaterEditorForm.styled.js","components/WaterEditorForm/WaterEditorForm.jsx","hooks/useModal.js","components/WterModals/AddWater.jsx","components/TodayWaterList/TodayList.styled.js","redux/water/selectors.js","components/WterModals/DeleteWaterModal.jsx","components/TodayWaterList/TodayWaterList.jsx","pages/HomePage/HomePage.styled.js","pages/HomePage/HomePage.jsx"],"sourcesContent":["export const selectorWaterMonth = state => state.dataMonth.data;\n","import styled from 'styled-components';\nimport { baseTheme } from '../../theme';\n\nexport const CalendarContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  /* height: 506px; */\n\n  @media screen and (min-width: 768px) {\n    /* height: 340px; */\n  }\n  @media screen and (min-width: 1440px) {\n    /* height: 332px; */\n  }\n`;\n\nexport const MonthNav = styled.div`\n  display: flex;\n  margin-bottom: 16px;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const MonthTitle = styled.h2`\n  color: ${baseTheme.colors.black};\n  font-size: 24px;\n  font-weight: 500;\n  line-height: calc(30 / 24);\n\n  @media screen and (min-width: 768px) {\n    font-size: 26px;\n    line-height: calc(32 / 26);\n  }\n`;\n\nexport const ArrowButton = styled.button`\n  width: 14px;\n  height: 14px;\n  padding: 0;\n  cursor: pointer;\n  margin: 0 10px;\n  background-color: transparent;\n  border: none;\n  fill: ${baseTheme.colors.blue};\n\n  &:disabled {\n    fill: ${baseTheme.colors.violet};\n    cursor: not-allowed;\n  }\n`;\n\nexport const Day = styled.div`\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  background-color: #fff;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  outline: ${props =>\n    props.$isOutlineVisible ? `1px solid ${baseTheme.colors.orange}` : 'none'};\n  cursor: pointer;\n  font-size: 14px;\n  line-height: 18px;\n\n  @media screen and (min-width: 768px) {\n    gap: 34px;\n    row-gap: 20px;\n    width: 34px;\n    height: 34px;\n  }\n`;\n\nexport const MonthControl = styled.div`\n  color: ${baseTheme.colors.blue};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Month = styled.span`\n  font-size: 16px;\n  line-height: 20px;\n`;\n\nexport const DayPercent = styled.span`\n  color: ${baseTheme.colors.violet};\n\n  font-size: 10px;\n  font-style: normal;\n  font-weight: 400;\n  align-items: center;\n  margin-top: 4px;\n  line-height: calc(16 / 10);\n  @media screen and (min-width: 768px) {\n    font-size: 13px;\n    line-height: calc(20 / 13);\n  }\n  @media screen and (min-width: 1440px) {\n    font-size: 12px;\n    line-height: calc(18 / 12);\n  }\n`;\n\nexport const DaysContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n\n  column-gap: 26px;\n  row-gap: 16px;\n\n  @media screen and (min-width: 768px) {\n    column-gap: 34px;\n    row-gap: 20px;\n    column-gap: 34px;\n  }\n  @media screen and (min-width: 1440px) {\n    column-gap: 22px;\n  }\n`;\n\nexport const DayCell = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  position: relative;\n`;\n","import styled from 'styled-components';\nimport { baseTheme } from '../../../components/theme';\n\nexport const CalendarModalStyles = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  width: 280px;\n  position: absolute;\n  bottom: 54px;\n\n  background-color: #fff;\n  border-radius: 10px;\n  box-shadow: 0px 4px 4px 0px rgba(64, 123, 255, 0.3);\n  padding: 24px 13px;\n  transform-origin: bottom;\n  z-index: 2;\n\n  @media screen and (max-width: 767px) {\n    left: ${props => -7 - props.$deltaNum}px;\n  }\n\n  @media screen and (min-width: 768px) {\n    right: ${props => (props.$delta ? '17px' : '')};\n    left: ${props => (props.$delta ? '' : '17px')};\n    padding: 24px 16px;\n    width: 292px;\n    bottom: 58px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    bottom: 56px;\n  }\n\n  h3 {\n    color: ${baseTheme.colors.blue};\n    font-size: '16px';\n    line-height: calc(20 / 16);\n  }\n  p {\n    color: ${baseTheme.colors.black};\n    font-size: '16px';\n    line-height: calc(20 / 16);\n    span {\n      color: ${baseTheme.colors.blue};\n      font-size: '18px';\n      font-weight: 500;\n      line-height: calc(24 / 18);\n    }\n  }\n`;\n","import { CalendarModalStyles } from './CalendarModal.styled';\n\nconst CalendarModal = ({ calendarRef, refData, waterData = {} }) => {\n  const { dayOfMonth, waterRate, percent, numberRecords } = waterData;\n\n  const currentRef = refData?.current.getBoundingClientRect().left;\n  const containerRef = calendarRef?.current.getBoundingClientRect().left;\n\n  let position = true;\n\n  const delta = currentRef - containerRef;\n  if (delta < 250) {\n    position = false;\n  }\n\n  return (\n    <CalendarModalStyles $delta={position} $deltaNum={delta}>\n      {Object.values(waterData).length ? (\n        <>\n          <h3>{dayOfMonth}</h3>\n          <p>\n            Daily norma: <span>{waterRate / 1000} L</span>\n          </p>\n          <p>\n            Fulfillment of the daily norm:{' '}\n            <span>{percent > 100 ? 100 : percent}%</span>\n          </p>\n          <p>\n            How many servings of water: <span>{numberRecords}</span>\n          </p>\n        </>\n      ) : (\n        <h3>You don't have records of this day.</h3>\n      )}\n    </CalendarModalStyles>\n  );\n};\n\nexport default CalendarModal;\n","import { useEffect, useRef, useState } from 'react';\nimport { Day, DayCell, DayPercent } from './Month.styled';\nimport CalendarModal from '../Modal/CalendarModal';\n\nconst DayComponent = ({ calendarRef, day, waterPercentage }) => {\n  const [activeModal, setActiveModal] = useState(null);\n  const ref = useRef(null);\n\n  const handleClick = e => {\n    if (ref.current && !ref.current.contains(e.target)) {\n      setActiveModal(null);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClick);\n    return () => {\n      document.removeEventListener('click', handleClick);\n    };\n  }, []);\n\n  const toggleModal = () => {\n    setActiveModal(prevModal => (prevModal === day ? null : day));\n  };\n\n  return (\n    <DayCell key={day}>\n      <div>\n        {activeModal === day && (\n          <CalendarModal\n            key={day}\n            calendarRef={calendarRef}\n            refData={ref}\n            waterData={waterPercentage}\n          />\n        )}\n      </div>\n      <Day\n        ref={ref}\n        onClick={() => toggleModal(day)}\n        $isOutlineVisible={!waterPercentage || waterPercentage.percent < 100}\n      >\n        {day}\n      </Day>\n      <DayPercent>\n        {waterPercentage ? `${Math.min(waterPercentage.percent, 100)}%` : '0%'}\n      </DayPercent>\n    </DayCell>\n  );\n};\n\nexport default DayComponent;\n","import { useState, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchMonthThunk } from 'redux/month/operations';\nimport { selectorWaterMonth } from 'redux/month/selectors';\n\nimport Icons from '../../../images/sprite.svg';\nimport DayComponent from './Day';\n\nimport {\n  ArrowButton,\n  CalendarContainer,\n  DaysContainer,\n  MonthNav,\n  MonthControl,\n  Month,\n  MonthTitle,\n} from './Month.styled';\n\nexport const Calendar = () => {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const dispatch = useDispatch();\n  const waterForMonth = useSelector(selectorWaterMonth);\n  const ref = useRef(null);\n\n  useEffect(() => {\n    const month = `${\n      currentDate.getMonth() + 1\n    } - ${currentDate.getFullYear()}`;\n\n    dispatch(fetchMonthThunk(month));\n  }, [dispatch, currentDate]);\n\n  const handleNextMonth = () => {\n    const nextMonthDate = new Date(\n      currentDate.getFullYear(),\n      currentDate.getMonth() + 1,\n      1\n    );\n    setCurrentDate(nextMonthDate);\n  };\n\n  const handlePrevMonth = () => {\n    const prevMonthDate = new Date(\n      currentDate.getFullYear(),\n      currentDate.getMonth() - 1,\n      1\n    );\n    setCurrentDate(prevMonthDate);\n  };\n\n  const isCurrentMonth = () => {\n    const today = new Date();\n    return (\n      currentDate.getMonth() === today.getMonth() &&\n      currentDate.getFullYear() === today.getFullYear()\n    );\n  };\n\n  const getDaysInMonth = () => {\n    return new Date(\n      currentDate.getFullYear(),\n      currentDate.getMonth() + 1,\n      0\n    ).getDate();\n  };\n\n  const renderDays = () => {\n    const daysInMonth = getDaysInMonth();\n    return Array.from({ length: daysInMonth }, (_, index) => {\n      const day = index + 1;\n      const waterPercentage = waterForMonth?.find(\n        item => item.dayOfMonth && Number(item.dayOfMonth.split(',')[0]) === day\n      );\n\n      return (\n        <DayComponent\n          key={day}\n          calendarRef={ref}\n          day={day}\n          waterPercentage={waterPercentage}\n        />\n      );\n    });\n  };\n\n  return (\n    <CalendarContainer className=\"calendar\" ref={ref}>\n      <MonthNav>\n        <MonthTitle>Month</MonthTitle>\n        <MonthControl>\n          <ArrowButton aria-label=\"Previous month\" onClick={handlePrevMonth}>\n            <svg width=\"14\" height=\"14\">\n              <use href={Icons + '#arrow-left'}></use>\n            </svg>\n          </ArrowButton>\n          <Month>\n            {new Intl.DateTimeFormat('en-US', { month: 'long' }).format(\n              currentDate\n            )}\n          </Month>\n          <ArrowButton\n            aria-label=\"Next month\"\n            onClick={handleNextMonth}\n            disabled={isCurrentMonth()}\n          >\n            <svg width=\"14\" height=\"14\">\n              <use href={Icons + '#arrow-right'}></use>\n            </svg>\n          </ArrowButton>\n        </MonthControl>\n      </MonthNav>\n      <DaysContainer>{renderDays()}</DaysContainer>\n    </CalendarContainer>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ModalContainer = styled.aside`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.7);\n  z-index: 10;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Modal = styled.div`\n  width: 280px;\n  max-width: 540px;\n  padding: 24px 12px;\n\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 24px;\n\n  border-radius: 10px;\n  background: #fff;\n  text-align: center;\n`;\n\nexport const ModalHead = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n`;\n\nexport const CloseBtn = styled.button`\n  border: none;\n  background-color: transparent;\n\n  & svg {\n    width: 24px;\n    height: 24px;\n  }\n\n  & use {\n    fill: #407bff;\n  }\n\n  &:hover use {\n    fill: #ff9d43;\n  }\n`;\n\nexport const ModalHeader = styled.h3`\n  font-size: 26px;\n  font-weight: 500;\n  line-height: 1.23; /* 123.077% */\n`;\n\nexport const SmaleHeader = styled.h4`\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 1.11; /* 111.111% */\n`;\n","import styled from 'styled-components';\n\nexport const AmountContainer = styled.aside`\n  display: flex;\n`;\n\nexport const PlusMinusBtn = styled.button`\n  border: none;\n  background-color: transparent;\n\n  & svg {\n    width: 24px;\n    height: 24px;\n    border-radius: 30px;\n    border: 1px solid #9ebbff;\n    background: #fff;\n    box-shadow: 0px 2px 4px 0px rgba(64, 123, 255, 0.2);\n  }\n\n  & use {\n    fill: #407bff;\n  }\n\n  &:hover use {\n    fill: #ff9d43;\n  }\n`;\n\nexport const AmountSpan = styled.span`\n  color: #407bff;\n  text-align: center;\n  font-family: Roboto;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 24px; /* 133.333% */\n`;\n\nexport const AmountDiv = styled.span`\n  width: 72px;\n  border-radius: 40px;\n  background: #d7e3ff;\n`;\n\nexport const SaveBtn = styled.button`\n  width: 100%;\n  display: flex;\n  padding: 8px 30px;\n  justify-content: center;\n  align-items: center;\n  border: none;\n  border-radius: 10px;\n  background: #407bff;\n  box-shadow: 0px 4px 8px 0px rgba(64, 123, 255, 0.34);\n\n  & span {\n    color: #fff;\n    line-height: 1.25; /* 125% */\n  }\n`;\n","import { Formik, Field, Form } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport {\n  AmountContainer,\n  AmountDiv,\n  AmountSpan,\n  PlusMinusBtn,\n  SaveBtn,\n} from './WaterEditorForm.styled';\nimport sprite from '../../images/sprite.svg';\nimport { addWater } from 'redux/water/operations';\nimport { closeModal } from 'redux/modals/modalsSlice';\n\nexport const WaterEditorForm = () => {\n  const dispatch = useDispatch();\n  const [volume, setVolume] = useState(50);\n\n  const increment = () => {\n    if (volume >= 2000) {\n      return;\n    }\n    setVolume(volume + 50);\n  };\n\n  const decrement = () => {\n    if (volume <= 50) {\n      return;\n    }\n    setVolume(volume - 50);\n  };\n\n  const changeValue = event => {\n    const val = parseInt(event.target.value);\n    if (val >= 0 && val <= 2000) {\n      setVolume(val);\n    }\n  };\n\n  const currentdate = new Date();\n  const datetime = currentdate.getHours() + ':' + currentdate.getMinutes();\n\n  const handleSubmit = ({ time }) => {\n    const inputTime = time.split(':');\n    currentdate.setHours(inputTime[0], inputTime[1]);\n    const date = currentdate.toISOString();\n    // console.log('currentdate', currentdate);\n    // console.log('Send date - ', date);   // TO FIX\n    dispatch(addWater({ amountWater: volume, date }));\n  };\n\n  return (\n    <>\n      <p>Amount of water:</p>\n      <AmountContainer>\n        <PlusMinusBtn onClick={decrement}>\n          <svg>\n            <use href={sprite + '#minus'}></use>\n          </svg>\n        </PlusMinusBtn>\n        <AmountDiv>\n          <AmountSpan>{volume}ml</AmountSpan>\n        </AmountDiv>\n\n        <PlusMinusBtn onClick={increment}>\n          <svg>\n            <use href={sprite + '#plus'}></use>\n          </svg>\n        </PlusMinusBtn>\n      </AmountContainer>\n      <Formik\n        initialValues={{ time: datetime, amountWater: volume }}\n        onSubmit={(values, actions) => {\n          handleSubmit(values);\n          actions.resetForm();\n          dispatch(closeModal());\n        }}\n        autoComplete=\"off\"\n      >\n        <Form>\n          <label>\n            Recording time:\n            <Field name=\"time\" type=\"time\" />\n          </label>\n          <label>\n            Enter the value of the water used:\n            <Field\n              name=\"amountWater\"\n              type=\"number\"\n              value={volume}\n              onChange={changeValue}\n            />\n          </label>\n          <label>{volume}ml</label>\n          <SaveBtn type=\"submit\">\n            <span>Save</span>\n          </SaveBtn>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { closeModal } from 'redux/modals/modalsSlice';\nimport modalConstants from 'redux/modals/modalСonstants';\n\nexport const useModalClose = modRef => {\n  const modal = useSelector(state => state.modals.modal);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const close = e => {\n      const isButton = e.type === 'keydown';\n      if (\n        e.key === 'Escape' ||\n        (!modRef.current.contains(e.target) && !isButton) ||\n        modal === modalConstants.CLOSE\n      ) {\n        dispatch(closeModal());\n      }\n    };\n    document.addEventListener('keydown', close);\n    document.addEventListener('mousedown', close);\n    return () => {\n      document.removeEventListener('keydown', close);\n      document.removeEventListener('mousedown', close);\n    };\n  }, [modRef, dispatch, modal]);\n};\n","import {\n  CloseBtn,\n  Modal,\n  ModalContainer,\n  ModalHead,\n  ModalHeader,\n  SmaleHeader,\n} from './WaterModals.styled';\nimport sprite from '../../images/sprite.svg';\nimport { WaterEditorForm } from 'components/WaterEditorForm/WaterEditorForm';\nimport { useDispatch } from 'react-redux';\nimport { closeModal } from 'redux/modals/modalsSlice';\nimport { useRef } from 'react';\nimport { useModalClose } from 'hooks/useModal';\n\nexport const AddWater = () => {\n  const dispatch = useDispatch();\n  const modalRef = useRef();\n  useModalClose(modalRef);\n\n  return (\n    <ModalContainer>\n      <Modal ref={modalRef}>\n        <ModalHead>\n          <ModalHeader>Add water</ModalHeader>\n          <CloseBtn onClick={() => dispatch(closeModal())}>\n            <svg>\n              <use href={sprite + '#close'}></use>\n            </svg>\n          </CloseBtn>\n        </ModalHead>\n        <SmaleHeader>Choose a value:</SmaleHeader>\n        <WaterEditorForm />\n      </Modal>\n    </ModalContainer>\n  );\n};\n","import styled from 'styled-components';\n\nexport const TodayStyle = styled.h2`\n  margin-bottom: 16px;\n  text-align: left;\n  color: var(--Primery-Color-Black, #2f2f2f);\n  font-size: 26px;\n  font-weight: 500;\n  line-height: 1.23; /* 123.077% */\n`;\n\nexport const ListItem = styled.li`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  border-bottom: 1px solid #d7e3ff;\n`;\n\nexport const InfoWrap = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 12px;\n\n  & svg {\n    width: 26px;\n    height: 26px;\n    & use {\n      fill: #9ebbff;\n    }\n  }\n`;\n\nexport const WrapBtn = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 18px;\n\n  & svg {\n    width: 16px;\n    height: 16px;\n  }\n`;\n\nexport const TextVolume = styled.p`\n  color: var(--Primery-Color-Blue, #407bff);\n  font-size: 18px;\n  line-height: 1.33; /* 133.333% */\n`;\n\nexport const TextTime = styled.p`\n  color: var(--Primery-Color-Black, #2f2f2f);\n  font-size: 12px;\n  line-height: 2; /* 200% */\n`;\n\nexport const EditBtn = styled.button`\n  border: none;\n  background-color: transparent;\n\n  & use {\n    fill: #9ebbff;\n  }\n\n  &:hover {\n    border-bottom: 1px solid #9ebbff;\n  }\n`;\n\nexport const DeleteBtn = styled.button`\n  border: none;\n  background-color: transparent;\n\n  & use {\n    fill: #ef5050;\n  }\n\n  &:hover {\n    border-bottom: 1px solid #ef5050;\n  }\n`;\n\nexport const AddBtnStyle = styled.button`\n  color: var(--Primery-Color-Blue, #407bff);\n  line-height: 1.25; /* 125% */\n  border: none;\n  background-color: transparent;\n\n  & svg {\n    width: 16px;\n    height: 16px;\n    & use {\n      fill: #407bff;\n    }\n  }\n\n  &:hover {\n    color: var(--Secondary-color-5, #ff9d43);\n    & use {\n      fill: #ff9d43;\n    }\n  }\n`;\n","// import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectTodayWater = state => state.water.items;\n\nexport const selectIsLoading = state => state.water.isLoading;\n\nexport const selectError = state => state.water.error;\n\n// export const selectTodayWater = createSelector(\n//     [selectTodayWater],\n//     (water) => {\n//         const dateObj = new Date();\n//         const month = dateObj.getUTCMonth() + 1;\n//         const day = dateObj.getUTCDate();\n//         const year = dateObj.getUTCFullYear();\n\n//         const nowdate = year + '/' + month + '/' + day;\n//         const today = water.filter(({ date }) => date === nowdate)\n//         return today\n//     }\n// );\n","import { useDispatch, useSelector } from 'react-redux';\nimport { CloseBtn, Modal, ModalContainer } from './WaterModals.styled';\nimport { useRef } from 'react';\nimport { useModalClose } from 'hooks/useModal';\nimport { closeModal } from 'redux/modals/modalsSlice';\nimport sprite from '../../images/sprite.svg';\nimport { deleteWter } from 'redux/water/operations';\n\nexport const DeleteWaterModal = () => {\n  const dispatch = useDispatch();\n  const modaldeleteRef = useRef();\n  useModalClose(modaldeleteRef);\n\n  const id = useSelector(state => state.modals.idWaterInModal);\n\n  const onDelete = () => {\n    console.log('id', id);\n    dispatch(deleteWter(id));\n    dispatch(closeModal());\n  };\n\n  return (\n    <ModalContainer>\n      <Modal ref={modaldeleteRef}>\n        <h3>Delete entry</h3>\n        <CloseBtn onClick={() => dispatch(closeModal())}>\n          <svg>\n            <use href={sprite + '#close'}></use>\n          </svg>\n        </CloseBtn>\n        <p>Are you sure you want to delete the entry?</p>\n        <button onClick={() => onDelete()}>Delete</button>\n        <button onClick={() => dispatch(closeModal())}>Cancel</button>\n      </Modal>\n    </ModalContainer>\n  );\n};\n","import { AddWater } from 'components/WterModals/AddWater';\nimport sprite from '../../images/sprite.svg';\nimport {\n  AddBtnStyle,\n  DeleteBtn,\n  EditBtn,\n  ListItem,\n  TextTime,\n  TextVolume,\n  TodayStyle,\n  InfoWrap,\n  WrapBtn,\n} from './TodayList.styled';\nimport { useSelector } from 'react-redux';\n\nimport { useDispatch } from 'react-redux';\nimport {\n  openAddWater,\n  openDeleteWater,\n  openEditWater,\n} from 'redux/modals/modalsSlice';\nimport modalConstants from 'redux/modals/modalСonstants';\nimport { fetchTodayWater } from 'redux/water/operations';\nimport { selectTodayWater } from 'redux/water/selectors';\nimport { useEffect } from 'react';\nimport { DeleteWaterModal } from 'components/WterModals/DeleteWaterModal';\n\nexport const TodayWaterList = () => {\n  const modal = useSelector(state => state.modals.modal);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchTodayWater());\n  }, [dispatch]);\n\n  const { waterNotes } = useSelector(selectTodayWater);\n\n  const onEdit = () => {\n    dispatch(openEditWater());\n  };\n  const onDelete = id => {\n    dispatch(openDeleteWater(id));\n  };\n\n  return (\n    <div>\n      <TodayStyle>Today</TodayStyle>\n      {waterNotes?.length > 0 ? (\n        <ul>\n          {waterNotes.map(({ amountWater, date, _id }) => (\n            <ListItem key={_id}>\n              <InfoWrap>\n                <svg>\n                  <use href={sprite + '#cup'}></use>\n                </svg>\n                <TextVolume>{amountWater} ml</TextVolume>\n                <TextTime>{date}</TextTime>\n              </InfoWrap>\n\n              <WrapBtn>\n                <EditBtn onClick={() => onEdit()}>\n                  <svg>\n                    <use href={sprite + '#edit'}></use>\n                  </svg>\n                </EditBtn>\n\n                <DeleteBtn onClick={() => onDelete(_id)}>\n                  <svg>\n                    <use href={sprite + '#trash'}></use>\n                  </svg>\n                </DeleteBtn>\n              </WrapBtn>\n            </ListItem>\n          ))}\n        </ul>\n      ) : (\n        <p>No records</p>\n      )}\n\n      <AddBtnStyle onClick={() => dispatch(openAddWater())}>\n        <svg>\n          <use href={sprite + '#plus'}></use>\n        </svg>\n        Add water\n      </AddBtnStyle>\n      {modal === modalConstants.ADD_WATER && <AddWater />}\n      {modal === modalConstants.DELETE_WATER && <DeleteWaterModal />}\n      {/* <DeleteWaterModal /> */}\n    </div>\n  );\n};\n","import styled from 'styled-components';\nimport { baseTheme } from '../../components/theme';\n\nexport const TrackerContainer = styled.div`\n  padding: 24px 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n\n  border-radius: 10px;\n  background: ${baseTheme.colors.grey};\n  box-shadow: 0px 4px 14px 0px rgba(64, 123, 255, 0.3);\n\n  @media screen and (min-width: 768px) {\n    padding: 32px 24px;\n  }\n`;\n","import { Calendar } from 'components/Calendar/Month/Month';\nimport { TodayWaterList } from 'components/TodayWaterList/TodayWaterList';\nimport { TrackerContainer } from './HomePage.styled';\n\nconst HomePage = () => {\n  return (\n    <TrackerContainer>\n      <TodayWaterList />\n      <Calendar />\n    </TrackerContainer>\n  );\n};\n\nexport default HomePage;\n"],"names":["selectorWaterMonth","state","dataMonth","data","CalendarContainer","styled","_templateObject","_taggedTemplateLiteral","MonthNav","_templateObject2","MonthTitle","_templateObject3","baseTheme","ArrowButton","_templateObject4","Day","_templateObject5","props","$isOutlineVisible","concat","MonthControl","_templateObject6","Month","_templateObject7","DayPercent","_templateObject8","DaysContainer","_templateObject9","DayCell","_templateObject10","CalendarModalStyles","$deltaNum","$delta","_ref","calendarRef","refData","_ref$waterData","waterData","dayOfMonth","waterRate","percent","numberRecords","position","delta","current","getBoundingClientRect","left","_jsx","children","Object","values","length","_jsxs","_Fragment","day","waterPercentage","_useState","useState","_useState2","_slicedToArray","activeModal","setActiveModal","ref","useRef","handleClick","e","contains","target","useEffect","document","addEventListener","removeEventListener","CalendarModal","onClick","prevModal","Math","min","Calendar","Date","currentDate","setCurrentDate","dispatch","useDispatch","waterForMonth","useSelector","month","getMonth","getFullYear","fetchMonthThunk","className","prevMonthDate","width","height","href","Icons","Intl","DateTimeFormat","format","nextMonthDate","disabled","today","isCurrentMonth","daysInMonth","getDate","Array","from","_","index","find","item","Number","split","DayComponent","renderDays","ModalContainer","Modal","ModalHead","CloseBtn","ModalHeader","SmaleHeader","AmountContainer","PlusMinusBtn","AmountSpan","AmountDiv","SaveBtn","WaterEditorForm","volume","setVolume","currentdate","datetime","getHours","getMinutes","sprite","Formik","initialValues","time","amountWater","onSubmit","actions","inputTime","setHours","date","toISOString","addWater","handleSubmit","resetForm","closeModal","autoComplete","Form","Field","name","type","value","onChange","event","val","parseInt","useModalClose","modRef","modal","modals","close","isButton","key","modalConstants","AddWater","modalRef","TodayStyle","ListItem","InfoWrap","WrapBtn","TextVolume","TextTime","EditBtn","DeleteBtn","AddBtnStyle","selectTodayWater","water","items","DeleteWaterModal","modaldeleteRef","id","idWaterInModal","console","log","deleteWter","TodayWaterList","fetchTodayWater","waterNotes","map","_id","openEditWater","openDeleteWater","openAddWater","TrackerContainer"],"sourceRoot":""}
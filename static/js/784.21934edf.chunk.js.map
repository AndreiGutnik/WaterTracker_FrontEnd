{"version":3,"file":"static/js/784.21934edf.chunk.js","mappings":"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","sources":["components/RegistrationForm/RegistrationForm.jsx","pages/SignUpPage/SignUpPage.styled.js","pages/SignUpPage/SignUpPage.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { register } from 'redux/auth/operations';\nimport {\n  SignUpContainer,\n  SightUp,\n  ErMsg,\n  FormBtnStyled,\n  BottleImg,\n  StyledBtn,\n  StyledField,\n  StyledForm,\n  Styledlabel,\n} from './RegistrationForm.styled.js';\nimport sprite from '../../images/sprite.svg';\nconst initialValues = {\n  email: '',\n  password: '',\n  repeatPassword: '',\n};\n\nconst validationSchema = Yup.object({\n  email: Yup.string().email('Invalid email address').required('Required'),\n  password: Yup.string()\n    .min(6, 'Password must be at least 6 characters')\n    .required('Required'),\n  repeatPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Required'),\n});\n\nconst RegistrationForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showRepeatPassword, setShowRepeatPassword] = useState(false);\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const handleSubmit = async ({ email, password }, { resetForm }) => {\n    dispatch(\n      register({\n        email,\n        password,\n      })\n    );\n    resetForm();\n  };\n\n  return (\n    <SignUpContainer>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ isSubmitting, touched, errors }) => (\n          <StyledForm>\n            <h2>Sign Up</h2>\n            <Styledlabel htmlFor=\"email\">Enter your email</Styledlabel>\n            <StyledField\n              type=\"email\"\n              name=\"email\"\n              id=\"email\"\n              placeholder=\"E-mail\"\n              autoComplete=\"email\"\n              error={touched.email && errors.email ? 'true' : 'false'}\n            />\n            <ErMsg name=\"email\" component=\"div\" />\n\n            <Styledlabel htmlFor=\"password\">\n              Enter your password\n              <StyledBtn onClick={() => setShowPassword(!showPassword)}>\n                <svg>\n                  <use\n                    href={sprite + (showPassword ? '#eye-show' : '#eye-hide')}\n                  ></use>\n                </svg>\n              </StyledBtn>\n            </Styledlabel>\n            <StyledField\n              type={showPassword ? 'text' : 'password'}\n              name=\"password\"\n              id=\"password\"\n              placeholder=\"Password\"\n              error={touched.password && errors.password ? 'true' : 'false'}\n              autoComplete=\"new-password\"\n            />\n\n            <ErMsg name=\"password\" component=\"div\" />\n\n            <Styledlabel htmlFor=\"repeatPassword\">\n              Repeat Password\n              <StyledBtn\n                onClick={() => setShowRepeatPassword(!showRepeatPassword)}\n              >\n                <svg>\n                  <use\n                    href={\n                      sprite + (showRepeatPassword ? '#eye-show' : '#eye-hide')\n                    }\n                  ></use>\n                </svg>\n              </StyledBtn>\n            </Styledlabel>\n            <StyledField\n              type={showRepeatPassword ? 'text' : 'password'}\n              name=\"repeatPassword\"\n              id=\"repeatPassword\"\n              placeholder=\"Repeat your password\"\n              error={\n                touched.repeatPassword && errors.repeatPassword\n                  ? 'true'\n                  : 'false'\n              }\n              autoComplete=\"new-password\"\n            />\n            <ErMsg name=\"repeatPassword\" component=\"div\" />\n\n            <FormBtnStyled type=\"submit\" disabled={isSubmitting}>\n              Sign Up\n            </FormBtnStyled>\n            <SightUp onClick={() => navigate('/signin')}>Sign in</SightUp>\n          </StyledForm>\n        )}\n      </Formik>\n      <BottleImg />\n    </SignUpContainer>\n  );\n};\n\nexport default RegistrationForm;\n","import styled from 'styled-components';\n\nimport backgroundDesktop from '../../images/welcome/backgroundDesktop.svg';\nimport backgroundTablet from '../../images/welcome/backgroundTablet.svg';\nimport backgroundMobile from '../../images/welcome/backgroundMobile.svg';\n\nexport const SignUpSection = styled.section`\n  background-position: top center;\n  background-image: url(${backgroundMobile});\n  background-repeat: no-repeat;\n  background-position: top 25px right 0;\n  width: 100%;\n  width: 320px;\n  margin: 0 auto;\n  padding: 0 20px;\n  outline: 1px solid red;\n\n  @media screen and (min-width: 768px) {\n    width: 768px;\n    padding: 0 32px;\n    background-image: url(${backgroundTablet});\n    background-position: center;\n    z-index: -2;\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: 1440px;\n    padding: 0 18px;\n    background-image: url(${backgroundDesktop});\n  }\n`;\n","import React from 'react';\nimport RegistrationForm from 'components/RegistrationForm/RegistrationForm';\nimport { SignUpSection } from './SignUpPage.styled';\n\nconst SignUpPage = () => {\n  return (\n    <SignUpSection>\n      <RegistrationForm />\n    </SignUpSection>\n  );\n};\n\nexport default SignUpPage;\n"],"names":["initialValues","email","password","repeatPassword","validationSchema","Yup","required","min","oneOf","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_useState3","_useState4","showRepeatPassword","setShowRepeatPassword","dispatch","useDispatch","navigate","useNavigate","handleSubmit","_ref3","_asyncToGenerator","_regeneratorRuntime","_callee","_ref","_ref2","resetForm","_context","prev","next","register","stop","_x","_x2","apply","arguments","_jsxs","SignUpContainer","children","_jsx","Formik","onSubmit","_ref4","isSubmitting","touched","errors","StyledForm","Styledlabel","htmlFor","StyledField","type","name","id","placeholder","autoComplete","error","ErMsg","component","StyledBtn","onClick","href","sprite","FormBtnStyled","disabled","SightUp","BottleImg","SignUpSection","styled","_templateObject","_taggedTemplateLiteral","backgroundMobile","backgroundTablet","backgroundDesktop","RegistrationForm"],"sourceRoot":""}